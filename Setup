#!/usr/bin/env bash
# Setup — Forcoder (REAL + automatizado)
# Menu reduzido e fluxo "one shot" para deixar tudo pronto.
# Opções:
#  [1] Infra completa (deps + Docker + Swarm/Overlay + download infra + .env + traefik:deploy)
#  [2] Só Docker
#  [3] Só baixar pacote da infra
#  [9] Sair

set -Eeuo pipefail

# ========= Visual =========
C_RESET="\e[0m"; C_OK="\e[32m"; C_WARN="\e[33m"; C_ERR="\e[91m"; C_INFO="\e[36m"; C_MUTED="\e[90m"
title() {
  clear
  echo -e "${C_INFO}"
  echo "==============================================================="
  echo "                     S E T U P   F O R C O D E R              "
  echo "==============================================================="
  echo -e "${C_RESET}"
}
say()   { echo -e "${C_INFO}==>${C_RESET} $*"; }
ok()    { echo -e "${C_OK}[OK]${C_RESET} $*"; }
warn()  { echo -e "${C_WARN}[!]${C_RESET} $*"; }
fail()  { echo -e "${C_ERR}[x]${C_RESET} $*"; }
dim()   { echo -e "${C_MUTED}$*${C_RESET}"; }

spinner() {
  local msg="$1"; shift
  local pid
  "$@" &> /dev/null & pid=$!
  local frames='-\|/' i=0
  printf "%s " "$msg"
  while kill -0 "$pid" 2>/dev/null; do
    i=$(( (i+1) % 4 ))
    printf "\r%s %s" "$msg" "${frames:$i:1}"
    sleep 0.12
  done
  wait $pid; local rc=$?
  printf "\r"
  return $rc
}

need_root() {
  if [[ $EUID -ne 0 ]]; then
    fail "Execute como root (sudo -i) ou rode com sudo)."
    exit 1
  fi
}

# ========= Config =========
ZIP_URL="${ZIP_URL:-https://github.com/BrunoHoinacki/setup-forcoder/archive/refs/heads/main.zip}"
INSTALL_DIR="${INSTALL_DIR:-/opt/forcoder/infra}"
WORKSPACE_DEFAULT="${WORKSPACE:-/workspace}"
OVERLAY_DEFAULT="${OVERLAY_NET:-edge}"
TZ="${TZ:-America/Sao_Paulo}"

export DEBIAN_FRONTEND=noninteractive
APTFLAGS=(-y -o Dpkg::Options::="--force-confnew")

# ========= Helpers =========
apt_unlock() {
  rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock-frontend || true
  dpkg --configure -a || true
}

ensure_pkg() { # ensure_pkg curl git ...
  local pkgs=("$@")
  apt_unlock
  spinner "Atualizando lista de pacotes" apt-get update -qq || true
  spinner "Instalando pacotes base" bash -c "apt-get install -qq ${APTFLAGS[*]} ${pkgs[*]}"
}

docker_installed() { command -v docker >/dev/null 2>&1; }
swarm_active()     { docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null | grep -qi 'active'; }
network_exists()   { docker network ls --format '{{.Name}}' | grep -qx "$1"; }

extract_zip_to() { # extract_zip_to url dest_dir
  local url="$1" dest="$2"
  mkdir -p "$dest"
  local tmp="/tmp/forcoder_infra.zip"
  spinner "Baixando pacote de infra" curl -fL "$url" -o "$tmp"
  spinner "Extraindo pacote" bash -c "unzip -oq \"$tmp\" -d \"$(dirname "$dest")\""
  rm -f "$tmp"
  # mover conteúdo do setup-forcoder-* para $dest
  local top
  top="$(find "$(dirname "$dest")" -mindepth 1 -maxdepth 1 -type d -name 'setup-forcoder-*' | head -n1 || true)"
  if [[ -n "$top" ]]; then
    mkdir -p "$dest"
    rsync -a "$top"/ "$dest"/ >/dev/null 2>&1 || true
  fi
  test -f "$dest/Makefile" || fail "Makefile não encontrado em $dest (download/extração falhou?)"
}

write_env() { # write_env dest_dir
  local dest="$1"
  cat > "$dest/.env" <<EOF
# ===== SetupForcoder .env =====
TZ=${TZ}
WORKSPACE=${WORKSPACE}
OVERLAY_NET=${OVERLAY}

# Cloudflare / ACME
CF_API_TOKEN=${CF_API_TOKEN}
CF_ZONE_ID=${CF_ZONE_ID}
ACME_EMAIL=${ACME_EMAIL}
EOF
}

ask() { # ask "Pergunta" "default" "varname"
  local prompt="$1"; local def="${2:-}"; local __var="$3"; local val
  if [[ -n "$def" ]]; then
    read -rp "$prompt [$def]: " val || true
    val="${val:-$def}"
  else
    while :; do
      read -rp "$prompt: " val || true
      [[ -n "$val" ]] && break
      warn "Valor obrigatório."
    done
  fi
  printf -v "$__var" "%s" "$val"
}

# ========= Passos (automatizados) =========
step_deps() {
  say "Instalando dependências…"
  ensure_pkg ca-certificates curl git unzip jq make ufw rsync lsb-release apt-transport-https gnupg
  ok "Dependências instaladas."
}

step_docker() {
  say "Instalando Docker Engine + Compose plugin…"
  if docker_installed; then
    ok "Docker já instalado."
  else
    spinner "Instalando Docker (get.docker.com)" bash -c "curl -fsSL https://get.docker.com | sh"
  fi
  systemctl enable docker >/dev/null 2>&1 || true
  systemctl restart docker >/dev/null 2>&1 || true
  ok "Docker pronto."
}

step_swarm_overlay_workspace() {
  say "Ativando Swarm + criando overlay + workspace…"
  # Swarm
  if swarm_active; then
    ok "Docker Swarm já está ativo."
  else
    spinner "Inicializando Docker Swarm" docker swarm init || true
  fi
  # Overlay
  if network_exists "$OVERLAY"; then
    ok "Rede overlay '${OVERLAY}' já existe."
  else
    spinner "Criando rede overlay '${OVERLAY}'" docker network create --driver overlay --attachable "$OVERLAY"
  fi
  # Workspace
  mkdir -p "$WORKSPACE"
  ok "Workspace: ${WORKSPACE}"
}

step_fetch_infra() {
  say "Baixando/atualizando pacote da infra…"
  mkdir -p "$INSTALL_DIR"
  extract_zip_to "$ZIP_URL" "$INSTALL_DIR"
  ok "Infra disponível em: ${INSTALL_DIR}"
}

step_prompt_env_and_deploy() {
  say "Coletando dados de configuração…"
  echo
  ask "Workspace base" "$WORKSPACE_DEFAULT" WORKSPACE
  ask "Nome da rede overlay (Swarm)" "$OVERLAY_DEFAULT" OVERLAY
  echo
  say "Cloudflare / ACME"
  ask "CF_API_TOKEN (perm. Zone.DNS Edit)" "" CF_API_TOKEN
  ask "CF_ZONE_ID" "" CF_ZONE_ID
  ask "ACME_EMAIL (e-mail para certificados)" "" ACME_EMAIL
  echo

  say "Gravando .env na infra…"
  write_env "$INSTALL_DIR"
  ok ".env criado em $INSTALL_DIR/.env"

  say "Publicando Traefik + ACME…"
  make -C "$INSTALL_DIR" traefik:deploy
  ok "Traefik publicado."
}

# ========= Fluxos =========
flow_full() {
  title
  step_deps
  step_docker
  WORKSPACE="$WORKSPACE_DEFAULT"
  OVERLAY="$OVERLAY_DEFAULT"
  step_swarm_overlay_workspace
  step_fetch_infra
  step_prompt_env_and_deploy
  echo
  ok "Infra pronta! Próximos passos:"
  dim "  • Para criar um app Laravel:  make -C $INSTALL_DIR app:new"
}

flow_only_docker() {
  title
  step_deps
  step_docker
  ok "Docker instalado."
}

flow_only_fetch() {
  title
  step_deps
  step_fetch_infra
  ok "Infra baixada."
  dim "Edite $INSTALL_DIR/.env e depois: make -C $INSTALL_DIR traefik:deploy"
}

# ========= Menu =========
menu_main() {
  while true; do
    title
    echo "Selecione uma opção:"
    echo "  [1] Instalar infra completa (recomendado)"
    echo "  [2] Instalar apenas Docker"
    echo "  [3] Apenas baixar/atualizar infra"
    echo "  [9] Sair"
    echo
    read -rp "Opção: " op
    case "$op" in
      1) flow_full; read -rp "Enter para voltar ao menu…";;
      2) flow_only_docker; read -rp "Enter para voltar ao menu…";;
      3) flow_only_fetch; read -rp "Enter para voltar ao menu…";;
      9) title; ok "Encerrando o Setup."; exit 0;;
      *) warn "Opção inválida."; sleep 0.5;;
    esac
  done
}

# ========= Exec =========
need_root
menu_main
